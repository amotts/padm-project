You will be given a kitchen environment with a Franka robot manipulator arm. 
The environment consists of a bunch of drawers, cabinets and countertops. 
Additionally, there are two boxes: a sugar box and a spam box spawned on a 
stove top burner and counter top respectively. In this environment, your 
objectives are to complete two tasks in no particular order,

1. Remove the sugar box from the top of the burner and place it somewhere on 
the nearby countertop
2. Stow the spam box inside the red drawer below it.

For this section of the project, you need to design a PDDL domain and problem 
file. You can learn more about PDDL here. You should think about which 
predicates, actions and types will be suitable for the given set of tasks.

-----------------------------------------------------------------------------------

Key elements of enviorment:

stovetop burner (x2 [Right, Left])
- can have object on top of it
- are there multiple?

counter top (x3 [Right, Center, Left])
- can have object on top of it
- are there multiple

drawers (x3 [Red, Blue, Green])
- can have object inside them
- can be open or closed
- multiple exist, labled by color
    - red drawer underneath counter top that sugar goes on

cabinets (x3 [Right, Center, Left])
- can have object inside them
- can be open or closed
- multiple exist


Plan:
Define each location as being sugar-occupied or spam-occupied
define each drawer, cabinet as open or closed
must be open before occupied status can be changed
Moves are (stovetop -> counter, drawer, cabinet)
          (counter -> stovetop, drawer, cabinet)
          (drawer -> counter, stovetop, cabinet)
          (cabinet -> counter, drawer, stovetop)

Objects: locations, things
locations: tops, insides
tops: countertop, stovetop -> may be better to not spewcify and just have tops always open
insides: drawers, cabinets

occupied-sugar ?locations -> can I combine these into a single occupied predicate? how to indicate goal state then?
occupied-spam ?locations
closed ?insides

Actions:
open insides
move thing location location


UPDATE: Need to add gripper movement 
Need to track gripper location, if gripper is holding something
Add actions for moving gripper, grab/release object/door, 

open door -> change door status, gripper must not be occupied
close door
grab/object -> must be unoccupied, in same location as object
release object
move empty gripper -> any location
move occupied gripper -> must be occupied, cannot move to loc that is closed or occupied

update goal to include a non occupied gripper



PLANNER:
start with a brute force method that calculates at each node all of the possible actions
and builds tree from there. Find shortest path by exploring the entire tree (proably use bfs
or the hybrid one that does DFS at a given depth). Then figure out how to implement
a FF heuristic by removing the delete effects